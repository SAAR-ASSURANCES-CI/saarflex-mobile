import 'package:saarflex_app/data/services/api_service.dart';
import 'package:saarflex_app/core/utils/logger.dart';

/// Service d'authentification - Logique m√©tier pure
/// Responsabilit√© : Gestion de l'authentification utilisateur
class AuthService {
  final ApiService _apiService = ApiService();

  /// Authentification utilisateur
  /// Retourne les informations utilisateur et le token
  Future<AuthResponse> login({
    required String email,
    required String password,
  }) async {
    try {
      AppLogger.info('üîê Tentative de connexion pour: $email');

      final authResponse = await _apiService.login(
        email: email,
        password: password,
      );

      AppLogger.info('‚úÖ Connexion r√©ussie pour: $email');
      return authResponse;
    } catch (e) {
      AppLogger.error('‚ùå Erreur de connexion: $e');
      rethrow;
    }
  }

  /// Inscription utilisateur
  /// Retourne les informations utilisateur et le token
  Future<AuthResponse> signup({
    required String nom,
    required String email,
    required String telephone,
    required String password,
  }) async {
    try {
      AppLogger.info('üìù Tentative d\'inscription pour: $email');

      final authResponse = await _apiService.signup(
        nom: nom,
        email: email,
        telephone: telephone,
        password: password,
      );

      AppLogger.info('‚úÖ Inscription r√©ussie pour: $email');
      return authResponse;
    } catch (e) {
      AppLogger.error('‚ùå Erreur d\'inscription: $e');
      rethrow;
    }
  }

  /// D√©connexion utilisateur
  /// Nettoie les donn√©es locales et notifie le serveur
  Future<void> logout() async {
    try {
      AppLogger.info('üö™ D√©connexion utilisateur');

      await _apiService.logout();

      AppLogger.info('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      AppLogger.error('‚ùå Erreur de d√©connexion: $e');
      // On continue m√™me en cas d'erreur serveur
      // car on veut d√©connecter l'utilisateur localement
    }
  }

  /// V√©rification du statut de connexion
  /// Retourne true si l'utilisateur est connect√©
  Future<bool> isLoggedIn() async {
    try {
      return await _apiService.isLoggedIn();
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification statut: $e');
      return false;
    }
  }

  /// Demande de r√©initialisation de mot de passe
  /// Envoie un email avec un code de r√©initialisation
  Future<void> forgotPassword(String email) async {
    try {
      AppLogger.info('üîë Demande de r√©initialisation pour: $email');

      await _apiService.forgotPassword(email);

      AppLogger.info('‚úÖ Email de r√©initialisation envoy√©');
    } catch (e) {
      AppLogger.error('‚ùå Erreur envoi email: $e');
      rethrow;
    }
  }

  /// V√©rification du code OTP
  /// Valide le code re√ßu par email
  Future<void> verifyOtp({required String email, required String code}) async {
    try {
      AppLogger.info('üîê V√©rification OTP pour: $email');

      await _apiService.verifyOtp(email: email, code: code);

      AppLogger.info('‚úÖ Code OTP v√©rifi√©');
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification OTP: $e');
      rethrow;
    }
  }

  /// R√©initialisation du mot de passe avec code
  /// Change le mot de passe apr√®s v√©rification du code
  Future<void> resetPasswordWithCode({
    required String email,
    required String code,
    required String newPassword,
  }) async {
    try {
      AppLogger.info('üîë R√©initialisation mot de passe pour: $email');

      await _apiService.resetPasswordWithCode(
        email: email,
        code: code,
        newPassword: newPassword,
      );

      AppLogger.info('‚úÖ Mot de passe r√©initialis√©');
    } catch (e) {
      AppLogger.error('‚ùå Erreur r√©initialisation: $e');
      rethrow;
    }
  }

  /// V√©rification de la validit√© du token
  /// Retourne true si le token est valide
  Future<bool> checkTokenValidity() async {
    try {
      final isLoggedIn = await _apiService.isLoggedIn();
      return isLoggedIn;
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification token: $e');
      return false;
    }
  }

  /// Initialisation de l'authentification
  /// V√©rifie le statut de connexion au d√©marrage
  Future<bool> initializeAuth() async {
    try {
      AppLogger.info('üöÄ Initialisation authentification');

      final isLoggedIn = await _apiService.isLoggedIn();

      if (isLoggedIn) {
        AppLogger.info('‚úÖ Utilisateur d√©j√† connect√©');
      } else {
        AppLogger.info('‚ÑπÔ∏è Utilisateur non connect√©');
      }

      return isLoggedIn;
    } catch (e) {
      AppLogger.error('‚ùå Erreur initialisation: $e');
      return false;
    }
  }
}
