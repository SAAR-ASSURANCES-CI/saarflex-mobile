import 'package:saarflex_app/data/services/api_service.dart';
import 'package:saarflex_app/data/models/user_model.dart';
import 'package:saarflex_app/core/utils/logger.dart';

/// Service utilisateur - Logique m√©tier pour la gestion du profil
/// Responsabilit√© : Gestion des donn√©es utilisateur et du profil
class UserService {
  final ApiService _apiService = ApiService();

  /// Chargement du profil utilisateur complet
  /// Retourne les informations d√©taill√©es de l'utilisateur
  Future<User> getUserProfile() async {
    try {
      AppLogger.info('üë§ Chargement du profil utilisateur');

      final user = await _apiService.getUserProfile();

      AppLogger.info('‚úÖ Profil charg√©: ${user.nom} (${user.email})');
      return user;
    } catch (e) {
      AppLogger.error('‚ùå Erreur chargement profil: $e');
      rethrow;
    }
  }

  /// Mise √† jour du profil utilisateur
  /// Met √† jour les informations utilisateur
  Future<User> updateProfile(Map<String, dynamic> updates) async {
    try {
      AppLogger.info('üìù Mise √† jour du profil: ${updates.keys.join(', ')}');

      final updatedUser = await _apiService.updateProfile(updates);

      AppLogger.info('‚úÖ Profil mis √† jour: ${updatedUser.nom}');
      return updatedUser;
    } catch (e) {
      AppLogger.error('‚ùå Erreur mise √† jour profil: $e');
      rethrow;
    }
  }

  /// V√©rification du statut de compl√©tion du profil
  /// Retourne true si le profil est complet
  Future<bool> checkProfileStatus() async {
    try {
      AppLogger.info('üîç V√©rification statut profil');

      final isComplete = await _apiService.checkProfileStatus();

      AppLogger.info(
        '‚úÖ Statut profil: ${isComplete ? "Complet" : "Incomplet"}',
      );
      return isComplete;
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification statut: $e');
      return false;
    }
  }

  /// Mise √† jour d'un champ sp√©cifique du profil
  /// Met √† jour un seul champ du profil utilisateur
  Future<User> updateUserField(String fieldName, dynamic value) async {
    try {
      AppLogger.info('üìù Mise √† jour champ: $fieldName');

      final updates = {fieldName: value};
      final updatedUser = await _apiService.updateProfile(updates);

      AppLogger.info('‚úÖ Champ $fieldName mis √† jour');
      return updatedUser;
    } catch (e) {
      AppLogger.error('‚ùå Erreur mise √† jour champ: $e');
      rethrow;
    }
  }

  /// V√©rification des r√¥les utilisateur
  /// Retourne true si l'utilisateur a le r√¥le sp√©cifi√©
  bool hasRole(User user, TypeUtilisateur role) {
    try {
      final hasRole = user.typeUtilisateur == role;
      AppLogger.info('üîê V√©rification r√¥le $role: $hasRole');
      return hasRole;
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification r√¥le: $e');
      return false;
    }
  }

  /// V√©rification des permissions d'acc√®s
  /// Retourne true si l'utilisateur peut acc√©der aux r√¥les sp√©cifi√©s
  bool canAccess(User user, List<TypeUtilisateur> allowedRoles) {
    try {
      final canAccess = allowedRoles.contains(user.typeUtilisateur);
      AppLogger.info('üîê V√©rification acc√®s: $canAccess');
      return canAccess;
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification acc√®s: $e');
      return false;
    }
  }

  /// V√©rification de la compl√©tion des documents d'identit√©
  /// Retourne true si tous les documents sont pr√©sents
  bool hasCompleteIdentityDocuments(User user) {
    try {
      final hasDocuments =
          user.frontDocumentPath != null &&
          user.frontDocumentPath!.isNotEmpty &&
          user.backDocumentPath != null &&
          user.backDocumentPath!.isNotEmpty;

      AppLogger.info(
        'üìÑ Documents identit√©: ${hasDocuments ? "Complets" : "Incomplets"}',
      );
      return hasDocuments;
    } catch (e) {
      AppLogger.error('‚ùå Erreur v√©rification documents: $e');
      return false;
    }
  }

  /// Actualisation des donn√©es utilisateur
  /// Recharge les donn√©es utilisateur depuis le serveur
  Future<User> refreshUserData() async {
    try {
      AppLogger.info('üîÑ Actualisation donn√©es utilisateur');

      final user = await _apiService.getUserProfile();

      AppLogger.info('‚úÖ Donn√©es actualis√©es: ${user.nom}');
      return user;
    } catch (e) {
      AppLogger.error('‚ùå Erreur actualisation: $e');
      rethrow;
    }
  }

  /// Validation des donn√©es utilisateur
  /// Valide les informations avant sauvegarde
  bool validateUserData(Map<String, dynamic> userData) {
    try {
      // Validation des champs obligatoires
      final requiredFields = ['nom', 'email', 'telephone'];

      for (final field in requiredFields) {
        if (userData[field] == null ||
            userData[field].toString().trim().isEmpty) {
          AppLogger.error('‚ö†Ô∏è Champ obligatoire manquant: $field');
          return false;
        }
      }

      // Validation de l'email
      final email = userData['email']?.toString() ?? '';
      if (!_isValidEmail(email)) {
        AppLogger.error('‚ö†Ô∏è Email invalide: $email');
        return false;
      }

      // Validation du t√©l√©phone
      final telephone = userData['telephone']?.toString() ?? '';
      if (!_isValidPhone(telephone)) {
        AppLogger.error('‚ö†Ô∏è T√©l√©phone invalide: $telephone');
        return false;
      }

      AppLogger.info('‚úÖ Donn√©es utilisateur valides');
      return true;
    } catch (e) {
      AppLogger.error('‚ùå Erreur validation: $e');
      return false;
    }
  }

  /// Validation de l'email
  /// Retourne true si l'email est valide
  bool _isValidEmail(String email) {
    final emailRegex = RegExp(
      r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$',
    );
    return emailRegex.hasMatch(email);
  }

  /// Validation du t√©l√©phone
  /// Retourne true si le t√©l√©phone est valide
  bool _isValidPhone(String phone) {
    // Supprimer les espaces et caract√®res sp√©ciaux
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');
    // V√©rifier que c'est un num√©ro de t√©l√©phone valide (8-15 chiffres)
    return cleanPhone.length >= 8 && cleanPhone.length <= 15;
  }
}
