import 'dart:async';
import 'package:saarflex_app/core/utils/logger.dart';
import 'package:saarflex_app/data/services/auth_service.dart';

/// Gestionnaire de session avec la logique de d√©connexion demand√©e
///
/// R√àGLES IMPL√âMENT√âES:
/// 1. Background ‚Üí Timer 5min ‚Üí D√©connexion
/// 2. Reload ‚Üí D√©connexion imm√©diate
/// 3. Fermeture ‚Üí D√©connexion imm√©diate
class SessionManager {
  static final SessionManager _instance = SessionManager._internal();
  factory SessionManager() => _instance;
  SessionManager._internal();

  // Services
  final AuthService _authService = AuthService();

  // Timer pour le background
  Timer? _backgroundTimer;
  static const Duration _backgroundTimeout = Duration(minutes: 5);

  // √âtat de l'application
  bool _isInBackground = false;
  bool _isAppClosed = false;

  /// Initialisation du gestionnaire de session
  /// √Ä appeler au d√©marrage de l'app
  void initialize() {
    AppLogger.info('üöÄ Initialisation SessionManager');
    _setupAppLifecycleListener();
  }

  /// Configuration de l'√©couteur du cycle de vie de l'app
  void _setupAppLifecycleListener() {
    // D√©tection du reload au d√©marrage
    _detectReload();
    AppLogger.info('üì± Configuration √©couteur cycle de vie');
  }

  /// D√©tection du reload de l'application
  void _detectReload() {
    // V√©rifier si l'app a √©t√© recharg√©e
    // Cette logique sera appel√©e √† chaque d√©marrage
    AppLogger.info('üîÑ V√©rification reload...');

    // Si l'app d√©marre et qu'il y a un token, c'est probablement un reload
    // La d√©connexion sera g√©r√©e par l'AuthViewModel lors de l'initialisation
  }

  // ===== GESTION DU BACKGROUND (R√àGLE 1) =====

  /// App passe en background
  /// D√©marre le timer de 5 minutes
  void onAppPaused() {
    if (_isAppClosed) return; // Ignorer si app ferm√©e

    AppLogger.info('üü° App en background - D√©marrage timer 5min');
    _isInBackground = true;
    _startBackgroundTimer();
  }

  /// App revient au premier plan
  /// Annule le timer si l'utilisateur revient √† temps
  void onAppResumed() {
    if (_isAppClosed) return; // Ignorer si app ferm√©e

    AppLogger.info('üü¢ App au premier plan - Annulation timer');
    _isInBackground = false;
    _cancelBackgroundTimer();
  }

  /// D√©marrage du timer de 5 minutes
  void _startBackgroundTimer() {
    _cancelBackgroundTimer(); // Annuler le timer pr√©c√©dent si existe

    _backgroundTimer = Timer(_backgroundTimeout, () {
      AppLogger.error('‚è∞ Timer 5min expir√© - D√©connexion automatique');
      _logoutUser('Session expir√©e (5 minutes d\'inactivit√©)');
    });

    AppLogger.info('‚è∞ Timer 5min d√©marr√©');
  }

  /// Annulation du timer de background
  void _cancelBackgroundTimer() {
    _backgroundTimer?.cancel();
    _backgroundTimer = null;
    AppLogger.info('‚úÖ Timer 5min annul√© - Session maintenue');
  }

  // ===== GESTION DU RELOAD (R√àGLE 2) =====

  /// Reload d√©tect√©
  /// D√©connexion imm√©diate
  void onAppReload() {
    AppLogger.error('üîÑ Reload d√©tect√© - D√©connexion imm√©diate');
    _logoutUser('Application recharg√©e');
  }

  // ===== GESTION DE LA FERMETURE (R√àGLE 3) =====

  /// App ferm√©e
  /// D√©connexion imm√©diate
  void onAppClosed() {
    AppLogger.error('üî¥ App ferm√©e - D√©connexion imm√©diate');
    _isAppClosed = true;
    _logoutUser('Application ferm√©e');
  }

  // ===== LOGIQUE DE D√âCONNEXION =====

  /// D√©connexion de l'utilisateur
  /// Nettoie toutes les donn√©es et redirige vers login
  Future<void> _logoutUser(String reason) async {
    try {
      AppLogger.info('üö™ D√©connexion utilisateur: $reason');

      // Annuler tous les timers
      _cancelBackgroundTimer();

      // D√©connexion via AuthService
      await _authService.logout();

      // Nettoyage des √©tats
      _isInBackground = false;
      _isAppClosed = false;

      AppLogger.info('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      AppLogger.error('‚ùå Erreur lors de la d√©connexion: $e');
    }
  }

  // ===== M√âTHODES UTILITAIRES =====

  /// V√©rifie si l'app est en background
  bool get isInBackground => _isInBackground;

  /// V√©rifie si l'app est ferm√©e
  bool get isAppClosed => _isAppClosed;

  /// V√©rifie si le timer de background est actif
  bool get isBackgroundTimerActive => _backgroundTimer?.isActive ?? false;

  /// Temps restant avant d√©connexion automatique
  Duration? get remainingBackgroundTime {
    if (!isBackgroundTimerActive) return null;

    // Note: Cette impl√©mentation n√©cessite de stocker le timestamp de d√©marrage
    // Pour une impl√©mentation compl√®te, il faudrait tracker le temps de d√©marrage
    return _backgroundTimeout;
  }

  /// Nettoyage des ressources
  void dispose() {
    _cancelBackgroundTimer();
    AppLogger.info('üßπ SessionManager nettoy√©');
  }
}
